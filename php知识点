PHP字符串的定义方式以及各自区别：
 单引号：
   单引号不能解析变量
   单引号不能解析转义字符，只能解析单引号和反斜线本身
   变量和变量、变量和字符串、字符串和字符串之间可以用.连接
 双引号：
   双引号可以解析变量，变量可以使用特殊字符和{}包含
   双引号可以解析所有转义字符
   也可以使用.来连接
   
 单引号的效率要高于双引号。

   $str="abcedf'{$a}'gh"-----> abcdef$a的值gh
   $sql = 'SELECT * FROM user WHERE name = \".name.'\";

   Heredoc 类似于双引号
   Newdoc 类似于单引号
   两者都用来处理大文本
   
数据类型：
  三大数据类型（标量、符合、特殊）

  浮点类型不能运用到相等运算中（$a+$b==0.8）。

  布尔类型  false的七种情况
            0,0.0,'','0',false,array(),NULL
            
  数组类型
    超全局数组
    $GLOBALS、$_GET、$_POST、$_REQUEST、$_SESSION、$_COOKIE、$_FILES、$_ENV
  
  NULL的三种情况
    直接赋值为NULL、未定义的变量、unset销毁的变量
    
  常量---定义：const、define
             const更快，是语言结构，define是函数。
             define不能用于类常量的定义，const可以
             常量一经定义，不能被修改，不能被删除。
             


PHP的运算符的错误控制符@
  PHP支持一个错误运算符：@。当将其放置在一个PHP表达式之前，该表达式可能产生的任何错误信息都被忽略掉。
PHP所有运算符考点
 运算符的优先级
 比较运算符
   ==（值）与===（值+类型）的区别
   等值判断（false的七种情况）
 递增/递减运算符
   递增/递减运算符不影响布尔值
   递减NULL值没有效果
   递增NULL值为1
   递增和递减在前就先运算后返回，反之就先返回，后运算。
 逻辑运算符
    短路作用
    ||和&&与or和and的优先级不同

PHP的遍历数组的三种方式及各自区别
  使用for循环、
  使用foreach循环、
  使用while、list()、each()组合循环。
  for循环只能遍历索引数组、foreach可以遍历索引和关联数组，联合使用list()、each()和while循环同样可以遍历索引和关联数组。
  while、list()、each()组合不会reset()
  foreach遍历会对数组进行reset()操作。


if......elseif
  在elseif语句中只能有一个表达式为true，即在elseif语句中只能有一个语句块被执行，多个elseif从句是排斥关系。
  使用elseif语句有一个基本原则，总把优先范围小的条件放在前面处理。


if(exp1){
}elseif(exp2){
}elseif(exp3){
}else{
}


switch...case...
和if不同的是，switch后面的控制表达式的数据类型只能是整形、浮点类型或者字符串。

continue语句作用到switch的作用类似于break
跳出switch外的for循环，可以使用continue2。


变量的作用域
   变量的作用域也称变量的范围，变量的范围即它定义的上下文背景（也是它的生效范围）。大部分的PHP变量只有一个单独的范围。
   这个单独的范围跨度同样包含了include和require引入的文件。
   对于php来说，默认情况下，全局变量是不能拿到函数内部来使用的，需要使用global关键字，把外部的变量拿到内部来使用。
   
   $outer='str';
   function mgfunc(){
     global $outer;或者是使用 $GLOBALS['outer'];
     echo $outer;
   }
静态变量
   静态变量仅在局部函数域中存在，单当程序执行离开此作用域时，其值并不会消失。
   static关键字
     1、仅初始化一次，下一次就不会执行这一行代码啦。
     2、初始化时需要赋值
     3、每次执行函数该值会保留
     4、static修饰的变量是局部的，仅在函数内部有效
     5、可以记录函数的调用次数，从而可以在某些条件下终止递归。
函数的参数以及参数的引用传递
   函数的参数：
     默认情况下，函数参数通过值传递
     如果希望允许函数修改它的值，必须通过引用传递参数
   引用传递
     $a=1;
     function muFun(&$a){
       $a=2
     }
     myFunc($a);
     echo $a; ----> 2   


函数的返回值以及引用返回
   
    函数的返回值
        值通过使用可选的返回语句(return)返回
        可以返回包括数组和对象的任意类型
        返回语句会中止函数执行，将控制权交回函数调用处。
        省略return，返回值为NULL，不可有多个返回值。

    函数的引用返回
       从函数返回一个引用，必须在函数声明和指派返回值给一个变量时都使用引用运算符 &

       function &myFunc(){
         static $b=10;
         return $b;
       }
       $a = myFunc();------>10
       $a = 10;
       $a = $myFunc();
       $a = 100;
       echo myFunc();-------->100

外部文件的导入
  include/require语句包含并运行指定文件。
  如果给出路径名，按照路径来找；否则从include_path中查找。
  如果include_path中也没有，则从调用脚本文件所在的目录和当前工作目录下寻找。
  当一个文件被包含时，其中所包含的代码继承了include所在行的变量范围。
  加载过程中未找到文件则include结果会发出一条警告；这一点和require不同，后者会发出一个致命错误。
  require在出错时产生E_COMPILE_ERROR级别的错误。
  换句话说将导致脚本中止而include只产生警告(E_WARNING),脚本会继续运行。
  require(include)/require_one(include_once)唯一区别是PHP会检查该文件是否已经被包含过，如果是则不会再次包含。
 

系统内置函数
   时间日期函数：date()、strtotime()、mktime()、time()、microtime()、date_default_timezone_set()
   IP处理函数：ip2long()、long2ip()
   打印处理：print()、pringtf()、print_r()、echo、sprintf()、var_dump()、var_export()
   序列化以及反序列函数：serialize()、unserialize()
   字符串处理函数：implode()、explode()、join()、strrev()、trim()、itrim()、rtrim()、strstr()、number_format()
   数组处理函数： array_keys()、array_values()、array_diff()、array_intersect()、array_merge()、array_shift()、
                array_unshift()、array_pop()、array_push()、sort()等。
                
                
 正则表达式的作用：分割、查找、匹配、替换字符串。
 分隔符：正斜线(/)、hash符号(#)以及取反符号(~)
 通用原子：\d、\D、\w、\W、\s、\S
 元字符：. * ^ $ + {n} {n,} {n,m} [] () [^] | [-]
 模拟修正符：i m e s U x A D u
 
 
 后向引用：
   
 
 贪婪模式：
 
 正则表达式基本语法
界定符：表示一个正则表达式的开始和结束 $pattern = '/[0-9]/';
原子：
    1、可见原子【Unicode编码表中用键盘输出后肉眼可见的字符】有哪些：标点，英文字母数字，汉字；
    2、不可见原子【Unicode编码表中用键盘输出后肉眼不可见的字符】有哪些：换行符\n、回车\r、制表符\t、空格。
元字符：
    原子的筛选方式：| 匹配两个或者多个分支选择；[] 匹配方括号中的任意一个原子；[^] 匹配除方括号中的原子之外的任意字符。
    原子的集合:
        . 匹配除换行符之外的任意字符,即[^\n]
        \d 匹配任意一个十进制数字，即[0-9]
        \D 匹配任意一个非十进制数字，即[^0-9]
        \s 匹配一个不可见原子，即[\f\n\r\t\v]
        \S 匹配一人可见原子，即[^\f\n\r\t\v]
        \w 匹配任意一个数字、字母或下划线，即[0-9a-zA-Z_]
        \W 匹配任意一个非数字、字母或下划线，即[^0-9a-zA-Z_]
量词：
    {n} 表示其前面的原子恰好出现n次
    {n,} 表示其前面的原子最少出现n次
    {n,m} 表示其前面的原子最少出现n次，最多出现m次
    * 匹配0次，1次或者多次其之前的原子，即{0,}
    + 匹配1次或者多次其之前的原子，即{1,}
    ? 匹配0次或者1次其之前的原子，即{0,1}
边界控制：^ 匹配字符串开始的位置，$ 匹配字符串结尾的位置。
模式单元：() 匹配其中的整体为一个原子。

修正模式：贪婪匹配与懒惰匹配
    贪婪模式:匹配结果存在歧义时取其长；
    懒惰匹配:匹配结果存在歧义的取其短。

常见修正模式
    U/u--懒惰匹配/贪婪匹配
    i---忽略英文字母大小写
    x--忽略空白
    s--让元字符'.'匹配包括换行符在内所有字符
    e--
 
 
 static知识点的介绍：
     1、全局变量：在程序中都可以使用的变量称为全局变量。
     <?php  
    global $global_nums;
    //初始化
    $global_nums = 0;
    Class Child {

        public $name;
        function __construct($name) {
            $this -> name = $name;
        }

        public function join_game() {
            //声明一下使用全局变量
            global $global_nums;
            $global_nums++;
            echo $this -> name."加入游戏<br/>";
        }
    }

    $child1 = new Child("lizzy");
    $child1 -> join_game();
    $child2 = new Child("zxm");
    $child2 -> join_game();
    $child3 = new Child("hahha");
    $child3 -> join_game();

    echo "共".$global_nums."人参加游戏";
?>
   2、静态变量：在类中定义静态变量（访问修饰符（如public）stadic $变量名;）
              如何访问静态变量：
                 a、如果在类中访问，有两种方法：self::$静态变量名;或者 类名::$静态变量名;
                 b、如果再类外访问：只有一种方法，类名::$静态变量名;
                 注意：php中静态变量不能用this访问，不能用对象去访问。

    <?php  

    Class Child {

        public $name;
        //定义并初始化一个静态变量
        public static $nums=0;
        function __construct($name) {
            $this -> name = $name;
        }

        public function join_game() {
            
            //引用静态变量
            self::$nums++;
            echo $this -> name."加入游戏<br/>";
        }
    }

    $child1 = new Child("lizzy");
    $child1 -> join_game();
    $child2 = new Child("zxm");
    $child2 -> join_game();
    $child3 = new Child("hahha");
    $child3 -> join_game();

    echo "共".Child::$nums."人参加游戏";
?>


3、静态方法
静态方法也叫类方法，静态方法是属于所有对象实例的，形式如下：访问修饰符(如public) static function 方法名() { }
注意：
1、 静态方法中不能访问非静态属性（变量），也就是static方法中不能用this 访问，无法识别this具体是哪个。
2、普通的成员方法，既可以操作非静态变量，也可以操作静态变量。
在类外部访问： 类名::类方法名 或者 对象名->类方法名
在类内部访问： 类名::类方法名 或者 self::类方法名


<?php

    class Student {

        public static $fee;
        public $name;
        //构造函数
        function __construct($name) {
            $this -> name = $name;
        }

        public static function startSchool($inputFee) {
            self::$fee += $inputFee;
        }

        //获取总学费
        public static function getAllFee() {
            return self::$fee;
        }
    }

    //1、通过类名调用静态方法
    // Student::startSchool(340);
    //2、通过对象调用静态方法
    $stu1 = new Student("lizzy");
    $stu1 -> startSchool(340);

    $stu2 = new Student("zxm");
    $stu2 -> startSchool(200);

    echo "总学费是：".Student::getAllFee();
?>

双冒号：不用实例化直接调用类的方法；
箭头：是调用类中的函数【需要先实例化】；
等于号箭头：定义数组用的。

array_unique() 接受array作为输入并返回没有重复值的新数组。
另一个方法是使用php的array_flip函数来间接的实现去重效果。

<?php
$arr =array("a"=>"a1","b"=>'b1',"c"=>"a2","d"=>"a1");
$arr1 = array_flip($arr);
print_r($arr1);//先反转一次,去掉重复值,输出Array ( [a1] => d[b1] => b [a2] => c )
$arr2 = array_flip($arr1);
print_r($arr2);//再反转回来,得到去重后的数组,输出Array([d] => a1 [b] => b1 [c] => a2)
$arr3 = array_unique($arr);
print_r($arr3);//利用php的array_unique函数去重,输出Array ( [a]=> a1 [b] => b1 [c] =>a2 )
?>

array_unique和array_flip间的区别
   二种方法不同的是用array_flip得到的是重复元素最后的键和值,用array_unique得到的是两个重复元素第一个键和值。
   
   
   
   
   
   
   
   
   

   
