#vagrant常用操作命令#################
#通过vagrant创建虚拟机
vagrant init centos/7
# 通过vagrant启动虚拟机
vagrant up
#通过ssh进入所创建的虚拟机里面
vagrant ssh
sudo yum update
# 退出
exit
clear
# 查看状态
vagrant status
#停止
vagrant halt
vagrant status
#删掉虚拟机
vagrant destroy
#docker安装操作####################
docker-machine create demo

docker-machine ls
#进入
docker-machine ssh demo

docker version

exit

docker-machine create demo1
docker-machine ls
docker-machine stop demo1
docker-machine stop demo
docker-machine start demo
#另外一种方式
docker-machine env demo
eval $(docker-machine env demo)

docker version
#删掉
docker-machine rm


# 在centos上按照docker

# Uninstall old versions
sudo yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-engine

sudo yum install -y yum-utils \
  device-mapper-persistent-data \
  lvm2

sudo yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo
        
sudo yum install docker-ce docker-ce-cli containerd.io

sudo systemctl start docker

sudo docker run hello-world

# 什么是Image
1、文件和meta data的集合（root filesysytem）
2、分层的，并且每一层都可以添加改变删除文件，成为一个新的image
3、不同的image可以共享相同的layer
4、image本身是read-only的
docker image rm IMAGE ID

docker hub是一个仓库。

docker pull ubuntu

# 去掉执行docker命令的时候，sudo权限
sudo groupadd docker
sudo gpasswd -a vagrant docker
# docker 服务重启
sudo service docker restart
#退出
exit
#重进
vagrant ssh

docker pull hello-world
docker run hello-world

# 什么是Containerr
1、通过Image创建
2、在Image layer之上建立一个container layer（可读写）
3、类比面向对象：类与实例
4、Image负责app的存储和分发，Container负责运行app

# 当前本地正在运行的容器
docker container ls
# 当前所有的容器（包括正在运行的和退出的）
docker container ls -a
# 删除容器
docker container rm CONTAINER ID
# 开启交互式
docker run -it centos
#列出所有的container id
docker container ls -aq
docker rm $(docker container ls -aq)
#把states=exited的容器列出来
docker container ls -f "states=exited"

#把states=exited的容器的id列出来
docker container ls -f "states=exited" -q
docker rm $(docker container ls -f "states=exited" -q)
#将container重新commited成一个image   ------>   docker container commit
docker commit NAMES xiaopeng/163/centos-vim
# 比较安全的做法 通过docker file 生成一个临时的container，最后生成一个image
# Dockerfile
```
FROM centos
RUN yum install -y vim
```
docker image build -t ixaopeng163/centos-vim-new .



















































