# Dockerfile语法梳理及最佳实践
FROM centos #使用base image

# LABEL
Metadata不可少

# RUN
每运行一次run，对于image来讲，都会生成新的一层。
RUN yum update && yum install -y vim \
    python-dev  #反斜线换行
		
为了美观，复杂的RUN请用反斜线换行！
避免无用分层，合并多条命令成一行！

# WORKDIR
WORKDIR /test #如果没有test目录，会自动创建test目录
WORKDIR demo
RUN pwd #输出结果应该是/test/demo

用WORKDIR，不要用RUN cd!
尽量使用绝对目录！

# ADD and COPY
ADD hello / #添加到根目录
ADD test.tar.gz /   #添加到根目录并解压缩

WORKDIR /root
ADD hello test/  #/root/test/hello

大部分情况，COPY优于ADD！
ADD除了COPY还有额外功能（解压）！
添加远程文件/目录请使用curl或者wget！

ENV
ENV MYSQL_VERSION 5.6 #设置常量
RUN yum install -y mysql-server="${MYSQL_VERSION}" \
		&& rm -rf /var/lib/apt/lists/* # 引用常量
ENV MYSQL_VERSION 5.6 #设置常量
尽量使用ENV增加可维护性！

VOLUME AND EXPOSE(存储和网络)

CMD AND ENTRYPOINT

官方Dockerfile demo
https://github.com/bijiaha0/mysql/tree/master/5.7

RUN CMD ENTRYPOINT

RUN:执行命令并创建新的 Image Layer
CMD:设置容器启动后默认执行的命令和参数
ENTRYPOINT:设置容器启动时运行的命令

Shell和Exec格式
Shell格式
FROM centos
ENV name Docker
ENTRYPOINT echo "hello $name"

Exec格式
FROM centos
ENV name Docker
ENTRYPOINT ["/bin/bash","-c","echo hello $name"]

vim Dockerfile
docker build -t xiaopeng163/centos-entrypoint-exec-new .
docker run xiaopeng163/centos-entrypoint-exec-new


### CMD
1、容器启动时默认执行的命令；
2、如果docker run指定了其他命令，CMD命令被忽略；
3、如果定义了多个CMD，只有最后一个会执行。
FROM centos 
ENV name Docker
CMD echo "hello $name"

docker run [image] 输出 hello docker
docker run -it [image] /bin/bash 不会有输出。

### ENTRYPOINT
1、让容器以应用程序或者服务的形式运行
2、不会被忽略，一定会执行
3、最佳实践：写一个shell脚本作为entrypoint

``` shell
COPY docker-entrypoint.sh /usr/local/bin
ENTRYPOINT ["docker-entrypoint.sh"]
EXPOSE 27017
cmd ["mongod"]

```
# docker镜像发布
docker login
Username:xiaopeng163
Password:123456
docker push xiaopeng163/hello-world:latest

# 进入正在运行的环境
docker exec -it CONTAINER ID /bin/bash

# 运行中的容器，它的ip地址
docker exec -it CONTAINER ID ip a

# 停掉正在运行的容器
docker container stop CONTAINER ID

# 启动运行过的容器
docker container start CONTAINER ID

# 给容器命名
docker run -d --name=demo xiaopeng163/flask-hello-world

# 查看容器的信息
docker inspect CONTAINER ID
# 查看容器运行过程中的日志
docker logs CONTAINER ID
















